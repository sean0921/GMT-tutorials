# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-17, 鄭懷傑 (Whyjay Zheng)
# This file is distributed under the same license as the GMT 教學手冊 package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: GMT 教學手冊 1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-11-06 15:45-0500\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.3.3\n"

#: ../../plot_vector_data.rst:3
msgid "繪製向量式資料"
msgstr "Plot Vector Data"

#: ../../plot_vector_data.rst:5
msgid ""
"地理空間資料通常會以網格形式或向量形式儲存。所謂的向量式資料，其實就是描述「點、線、面」位置與形狀的資料。\\ "
"有關於如何繪製點資料的技巧，我們已經在「\\ :doc:`scatter_plot`\\ 」一章中提及，因此在本章中，將會\\ 說明如何利用 "
"GMT 繪製線段以及多邊形、簡介與 GMT 相容的向量式資料檔案格式，以及透明度的設定--這種填色技巧\\ "
"非常適合用在常常需要疊在一起呈現的向量式資料上。"
msgstr ""

#: ../../plot_vector_data.rst:11
msgid "目標"
msgstr ""

#: ../../plot_vector_data.rst:12
#, python-format
msgid ""
"繪製一張\\ `七巧板 "
"<https://zh.wikipedia.org/wiki/%E4%B8%83%E5%B7%A7%E6%9D%BF>`_\\ "
"的盤面，如下所示。\\ 七巧板是一種類似拼圖的玩具，遊玩目標通常是利用 7 個多邊形拼出指定的圖案。這邊拼出的是正方形，也是所有的圖案裡最基本\\"
" 的一種。"
msgstr ""

#: ../../plot_vector_data.rst:16
msgid ""
"在此圖中，七個多邊形顏色均不相同，但都有黑色邊緣，而且在盤面上還有淡色的棋盤式格子，可以幫助你計算每個多邊形的\\ "
"大小。要讓這些線條與多邊形的顏色同時呈現，我們必須要在色階檔中加上透明度的設定，並且使用不同的出圖指令。"
msgstr ""

#: ../../plot_vector_data.rst:23
msgid "直接觀看\\ `指令稿`_"
msgstr ""

#: ../../plot_vector_data.rst:27
msgid "使用的指令與概念"
msgstr ""

#: ../../plot_vector_data.rst:28
msgid "``makecpt`` - **製作含有透明度設定的色階檔**"
msgstr ""

#: ../../plot_vector_data.rst:29
msgid "``psxy`` - **繪製線段與多邊形**、輸出檔頭與檔尾"
msgstr ""

#: ../../plot_vector_data.rst:30
msgid "``psconvert`` - **把 ps 檔轉成 png 檔並保留透明度設定**"
msgstr ""

#: ../../plot_vector_data.rst:34
msgid "操作流程"
msgstr ""

#: ../../plot_vector_data.rst:35
msgid ""
"讓我們先來看看 ``psxy`` 是怎麼處理線段和多邊形資料的。一般來說，這類型的資料會以文字格式儲存在個別的檔案中，然後我們再使用 "
"``psxy`` 來讀取他們，像是如下的示意語法："
msgstr ""

#: ../../plot_vector_data.rst:38
msgid "$ psxy 輸入檔名稱 [選項...] > 輸出的 ps 檔"
msgstr ""

#: ../../plot_vector_data.rst:42
msgid "線段顧名思義，就是很多個頂點連起來的線條。GMT 可接受的線段檔案格式，如下所示："
msgstr ""

#: ../../plot_vector_data.rst:44
msgid ""
"> [線段 1 的設定]\n"
"線段 1 的頂點 1\n"
"線段 1 的頂點 2\n"
"...\n"
"> [線段 2 的設定]\n"
"線段 2 的頂點 1\n"
"線段 2 的頂點 2\n"
"...\n"
"> [線段 3 的設定]\n"
"..."
msgstr ""

#: ../../plot_vector_data.rst:57
msgid ""
"如果是二維線段，頂點就是兩欄資料，分別為 X 座標和 Y 座標。因為是線段，所以每條線至少都要有 2 個頂點。\\ 不同線段之間預設以 ``>``"
" 符號隔開，符號後方可以接上 ``-W`` 或 ``-Z``，代表者 ``psxy`` 在畫圖的時候會對這條線使用的繪圖選項："
msgstr ""

#: ../../plot_vector_data.rst:60
msgid "``-W``：指定畫筆樣式"
msgstr ""

#: ../../plot_vector_data.rst:61
msgid "``-Z``：藉由給定色階檔的數值指定顏色"
msgstr ""

#: ../../plot_vector_data.rst:63
msgid ""
"詳細的說明請參考\\ `這裡 <http://gmt.soest.hawaii.edu/doc/5.3.2/psxy.html#segment-"
"header-parsing>`_\\ 。\\ 我們就來研究一下，如果要畫出七巧板的背景網格，需要怎麼樣的線段檔案："
msgstr ""

#: ../../plot_vector_data.rst:66
msgid ""
"> -W3p,black,.\n"
"1 0\n"
"1 4\n"
">\n"
"2 0\n"
"2 4\n"
">\n"
"3 0\n"
"3 4\n"
">\n"
"0 1\n"
"4 1\n"
">\n"
"0 2\n"
"4 2\n"
">\n"
"0 3\n"
"4 3"
msgstr ""

#: ../../plot_vector_data.rst:87
msgid ""
"在此檔案中，總共有 6 條線段，前三條是直線，後三條是橫線。以第 1 條為例，它是從座標 (1, 0) 到 (1, 4) 的線段。\\ "
"第一條線段的 ``>`` 符號後面有 ``-W`` 設定，意味著這條線要使用黑色、點點樣式和 3p 寬度來繪製。之後所有的 ``>`` "
"符號後面都沒有任何設定， ``psxy`` 在繪圖的時候，會\\ **自動沿用之前已經設定過的參數值**\\ "
"，因此後五條線畫出來的外觀會與第一條相同。把檔案存為 ``lines.txt``，\\ 然後使用如下指令，就可以畫出背景網格。"
msgstr ""

#: ../../plot_vector_data.rst:92 ../../plot_vector_data.rst:228
msgid "$ psxy lines.txt -R0/4/0/4 -JX15c -P > lines.ps"
msgstr ""

#: ../../plot_vector_data.rst:98
msgid ""
"看起來還不錯！接下來讓我們看一下要怎麼畫多邊形。其實多邊形資料與線段大同小異，就是把所有的頂點座標紀錄在檔案內而已；\\ "
"不過，多邊形的頂點數目最少要有 3 個。GMT 可接受的多邊形檔案格式，如下所示："
msgstr ""

#: ../../plot_vector_data.rst:101
msgid ""
"> [多邊形 1 的設定]\n"
"多邊形 1 的頂點 1\n"
"多邊形 1 的頂點 2\n"
"多邊形 1 的頂點 3\n"
"...\n"
"> [多邊形 2 的設定]\n"
"..."
msgstr ""

#: ../../plot_vector_data.rst:111
msgid ""
"分隔符號後方可以接上 ``-W``、``-Z`` 或 ``-G`` (詳細的說明請參考\\ `這裡 "
"<http://gmt.soest.hawaii.edu/doc/5.3.2/psxy.html#segment-header-"
"parsing>`_\\ )："
msgstr ""

#: ../../plot_vector_data.rst:114
msgid "``-W``：指定多邊形的外框畫筆樣式"
msgstr ""

#: ../../plot_vector_data.rst:115
msgid "``-Z``：藉由給定色階檔的數值指定多邊形填色"
msgstr ""

#: ../../plot_vector_data.rst:116
msgid "``-G``：直接指定多邊形填色"
msgstr ""

#: ../../plot_vector_data.rst:118
msgid "例如，要畫出七巧板上的圖形，我們可以使用如下的檔案內容："
msgstr ""

#: ../../plot_vector_data.rst:120 ../../plot_vector_data.rst:350
msgid ""
"> -Z0\n"
"0 0\n"
"2 2\n"
"4 0\n"
"> -Z3\n"
"0 0\n"
"2 2\n"
"0 4\n"
"> -Z6\n"
"0 4\n"
"1 3\n"
"2 4\n"
"> -Z9\n"
"1 3\n"
"2 4\n"
"3 3\n"
"2 2\n"
"> -Z12\n"
"3 3\n"
"2 2\n"
"3 1\n"
"> -Z15\n"
"3 1\n"
"3 3\n"
"4 2\n"
"4 0\n"
"> -Z18\n"
"2 4\n"
"4 2\n"
"4 4"
msgstr ""

#: ../../plot_vector_data.rst:153
msgid ""
"第一個多邊形是七巧板底部的大三角形，座標從 (0, 0)、(2, 2) 到 (4, 0)，各位可以試試看找出其他六個多邊形分別是什麼形狀。\\ "
"注意在每個多邊形的 ``>`` 後方都有 ``-Z`` 設定，代表著我們只要給定色階檔，GMT 就會自動的依照 Z 值與色階檔的對應，\\ "
"為每個多邊形填上不同的顏色。在 GMT 中，有一個稱為「\\ **wysiwyg**\\ [#]_\\ "
"」的色階檔，最適合用來當這種依照數值指定不同種類顏色\\ 的參考色階。它的顏色如下所示："
msgstr ""

#: ../../plot_vector_data.rst:160
msgid "把以上的文字檔案另存成 ``pieces.txt``，然後使用如下的指令繪圖："
msgstr ""

#: ../../plot_vector_data.rst:162
msgid ""
"$ makecpt -Cwysiwyg > tangram.cpt\n"
"$ psxy pieces.txt -R0/4/0/4 -JX15c -P -L -Ctangram.cpt > pieces.ps"
msgstr ""

#: ../../plot_vector_data.rst:167
msgid ""
"注意這裡的 ``-L``，這個參數會告訴 ``psxy`` 我們畫的是多邊形，如此一來 ``psxy`` 才會\\ "
"**強制封閉線段並在內部填色**\\ 。"
msgstr ""

#: ../../plot_vector_data.rst:171
msgid "這下子七巧板也有模有樣了！我們順便來加上邊框："
msgstr ""

#: ../../plot_vector_data.rst:173
msgid ""
"$ psxy pieces.txt -R0/4/0/4 -JX15c -P -L -W2p,black -Ctangram.cpt > "
"pieces.ps"
msgstr ""

#: ../../plot_vector_data.rst:179
msgid ""
"看起來非常不錯，不過請注意到圖形的角落，例如左下角，有一些小小的線段突出來了。這是因為使用這種方式繪製的邊框是沿著多邊形邊邊描繪，\\ "
"因此原本的各個多邊形會稍稍放大一點點。如果你覺得這沒關係，那倒無妨；但如果你是個完美主義者，不想看到任何東西突出在正方形方框外面，\\ "
"可以選擇的替代方案，就是把多邊形邊框挪到 ``lines.txt`` 裡面做成線段資料，與網格線條一起繪製。因此，我們的 "
"``lines.txt`` 要多增加\\ 幾行資訊："
msgstr ""

#: ../../plot_vector_data.rst:184 ../../plot_vector_data.rst:306
msgid ""
"> -W1p,grey,.\n"
"1 0\n"
"1 4\n"
">\n"
"2 0\n"
"2 4\n"
">\n"
"3 0\n"
"3 4\n"
">\n"
"0 1\n"
"4 1\n"
">\n"
"0 2\n"
"4 2\n"
">\n"
"0 3\n"
"4 3\n"
"> -W2p,black\n"
"0 0\n"
"4 0\n"
"4 4\n"
"0 4\n"
"0 0\n"
">\n"
"0 4\n"
"4 0\n"
">\n"
"0 0\n"
"3 3\n"
">\n"
"3 1\n"
"3 3\n"
">\n"
"1 3\n"
"2 4\n"
">\n"
"2 4\n"
"4 2"
msgstr ""

#: ../../plot_vector_data.rst:226
msgid "後半從 ``> -W2p,black`` 開始的部份，就是七巧板邊框與拼圖的邊界線段。讓我們再試一次以下指令："
msgstr ""

#: ../../plot_vector_data.rst:234
msgid ""
"看起來賞心悅目多了！最後的問題，就是把多邊形和線條疊加在一起。在套疊許多地理資料時，\\ **透明度**\\ 是一大利器，\\ "
"讓你可以同時瀏覽許多不同類型的資料，又不會擋到彼此。在本章中，我們就來試試看使用具有透明度的顏色。首先要從製作色階檔\\ "
"開始，``makecpt`` 的 ``-A`` 選項是用來指定透明度的："
msgstr ""

#: ../../plot_vector_data.rst:238
msgid ""
"$ makecpt -Cwysiwyg -A70 > tangram.cpt\n"
"# -A: %70 透明"
msgstr ""

#: ../../plot_vector_data.rst:243
msgid "這時色階檔的內容會像是"
msgstr ""

#: ../../plot_vector_data.rst:245
msgid ""
"0    64/0/64@70    1    64/0/64@70\n"
"1    64/0/192@70   2    64/0/192@70\n"
"... (以下略)"
msgstr ""

#: ../../plot_vector_data.rst:251
msgid ""
"在 ``@`` 符號後面的就是透明度，因此整個顏色的格式為：``紅/綠/藍@透明度``。使用此色階檔畫圖，所有的顏色就會被套上透明度設定。\\ "
"問題是，PostScript 格式其實是不支援透明度的，就算你設定了透明選項，直接打開 .ps 檔的話，仍然不會看到任何改變。幸好，GMT "
"提供了\\ 一個指令 ``psconvert``，可以把 .ps 檔中不能顯示的透明度設定，轉檔成別的格式以成功顯示。它的語法為"
msgstr ""

#: ../../plot_vector_data.rst:255
msgid "$ psconvert 輸入的ps檔 -T輸出檔格式 [其他選項...]"
msgstr ""

#: ../../plot_vector_data.rst:259
msgid "``輸出檔格式`` 使用單一字母來指定，例如 ``g`` 是 PNG，``f`` 是 PDF 等等。在最終的指令稿中，我們使用的格式和選項如下所示："
msgstr ""

#: ../../plot_vector_data.rst:261
msgid ""
"$ psconvert tangram.ps -Tg -A -P\n"
"# -A: 裁剪至影像範圍\n"
"# -P: 強迫直向輸出 (我們的圖本來就是直向，所以在本例中這個不加也沒差，但一律加上的話對其他不同的情況很方便)"
msgstr ""

#: ../../plot_vector_data.rst:267
msgid "輸出檔會自動的把 ``.ps`` 改成 ``.png``，主檔名則維持不變，但這下子你就能看到透明、粉嫩粉嫩的顏色了！"
msgstr ""

#: ../../plot_vector_data.rst:271
msgid ""
"在舊的 GMT 腳本中，這個功能是由 ``ps2raster`` 指令負責執行，但在 GMT 5 中，``ps2raster`` 預計會被 "
"``psconvert`` 逐步取代。因此，如果你使用以下指令轉檔，會出現警告訊息，提醒你要把 ``ps2raster`` 換成 "
"``psconvert``。"
msgstr ""

#: ../../plot_vector_data.rst:274
msgid "ps2raster tangram.ps -Tg -A -P"
msgstr ""

#: ../../plot_vector_data.rst:280
msgid "指令稿"
msgstr ""

#: ../../plot_vector_data.rst:281
msgid "本地圖的最終指令稿如下："
msgstr ""

#: ../../plot_vector_data.rst:283
msgid ""
"# ==== 設定變數 ====\n"
"out_ps=\"tangram.ps\"\n"
"in_cpt=\"tangram.cpt\"\n"
"\n"
"# ==== 製作含有透明度的色階檔 ====\n"
"makecpt -Cwysiwyg -A70 > $in_cpt\n"
"\n"
"# ==== 畫線、畫多邊形 ====\n"
"    # 寫入檔頭、-R 與 -J 的設定\n"
"psxy -R0/4/0/4 -JX15c -T -K -P > $out_ps\n"
"    # 注意線和多邊形的樣式設定其實是寫在各自的檔案中！\n"
"psxy lines.txt -R -J -O -K >> $out_ps\n"
"psxy pieces.txt -R -J -O -K -L -C$in_cpt >> $out_ps\n"
"    # 寫入 EOF\n"
"psxy -R -J -O -T >> $out_ps\n"
"\n"
"# ==== 轉成 png 檔並保留透明度設定 ====\n"
"psconvert $out_ps -A -P -Tg"
msgstr ""

#: ../../plot_vector_data.rst:304
msgid ""
"線段資料 ``lines.txt`` 內容如下，並\\ :download:`可在這裡下載 "
"<plot_vector_data/lines.txt>`\\ 。"
msgstr ""

#: ../../plot_vector_data.rst:348
msgid ""
"多邊形資料 ``pieces.txt`` 內容如下，並\\ :download:`可在這裡下載 "
"<plot_vector_data/pieces.txt>`\\ 。"
msgstr ""

#: ../../plot_vector_data.rst:385
msgid ""
"「使用 ``wysiwyg`` 色階建立具有透明度的色階檔，接下來繪製座標格線與七巧板邊線，再使用剛才產生的色階檔為每個板塊填色。\\ "
"為了使透明度可見，我們使用 ``psconvert`` 把輸出檔轉成 PNG 格式以成功顯示。」"
msgstr ""

#: ../../plot_vector_data.rst:388
msgid "觀看\\ `最終版圖片`_"
msgstr ""

#: ../../plot_vector_data.rst:391
msgid "習題"
msgstr ""

#: ../../plot_vector_data.rst:394
msgid "What You See Is What You Get, 即「所見即所得」。"
msgstr ""

#~ msgid "前置作業"
#~ msgstr ""

#~ msgid "線段資料 ``lines.txt``："
#~ msgstr ""

#~ msgid "多邊形資料 ``pieces.txt``："
#~ msgstr ""

#~ msgid "「」"
#~ msgstr ""

